# Air Exchanger v0.1.3
# Known Issues
  # 1. Intermittent Custom is a bad name
esphome:
  name: air-exchanger
  friendly_name: Air Exchanger
  on_boot:
    priority: -100 #execute after everything else has initialized
    then:
      # Force the hrv_state automation to run on boot to return any previously running scripts
      - lambda: |-
          if (( id(turbo_switch).state ) || ( id(hold_switch).state )) {
            // If 'Turbo' or 'Hold' enabled, just restore 'previous_state' to proper value
            id(previous_state) = id(mode).state;
          }
          else {
            // Else restore 'hrv_state' to the current 'mode'
            id(hrv_state).publish_state(id(mode).state);
          }

esp32:
  board: esp32dev
  framework:
    type: arduino #must be arduino to support bsec library
    # type: esp-idf

preferences:
  flash_write_interval: 10min

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  password: !secret ota_password  

# i2c:
#   - id: "i2cbus"
#     sda: GPIO18
#     scl: GPIO19
#     scan: true

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  reboot_timeout: 150min 
  manual_ip:
    static_ip: 192.168.0.94
    gateway: 192.168.0.1
    subnet: 255.255.255.0
  # power_save_mode: none

# esp32_ble_tracker:
#   scan_parameters:
#     interval: 1100ms
#     window: 1100ms
#     active: true

# bluetooth_proxy:
#   active: true

globals:
  - id: previous_state
    type: std::string
    restore_value: no
    # initial_value: "" 
  - id: high_cfm
    type: int
    initial_value: '150'
  - id: low_cfm
    type: int
    initial_value: '66'


select:
  - platform: template
    name: Mode
    id: mode
    options:
      - "Max"
      # - "Intermittent"
      - "Intermittent (Custom)"
      - "Min"
      - "Idle"
    restore_value: true
    initial_option: "Idle"
    on_value:
      then:
        lambda: !lambda |-
          ESP_LOGD("custom", "Entered the lambda");
          if (x == "Max") {
            id(hrv_state).publish_state("Max");
          } else if (x == "Intermittent") {
            id(hrv_state).publish_state("Intermittent");
          } else if (x == "Intermittent (Custom)") {
            id(hrv_state).publish_state("Intermittent (Custom)");
          } else if (x == "Min") {
            id(hrv_state).publish_state("Min");
          } else {
            id(hrv_state).publish_state("Idle");
          }
    optimistic: true

text_sensor:
  - platform: template
    icon: mdi:fan
    name: Current State
    id: hrv_state
    update_interval: 120min #this sensor always has its value pushed to it
    on_value: 
      then: 
        lambda: |-
          std::string state_value = x;  //get trigger value

          if (state_value != "Turbo" && id(turbo_switch).state) { // If turbo_switch is on despite not being in Turbo mode
            ESP_LOGD("Custom", "The Turbo Sequence was turned off by a mode change");
            id(turbo_switch).publish_state(false);
          }
          if (state_value != "Hold" && id(hold_switch).state) { // If hold_switch is on despite not being in Hold mode
            ESP_LOGD("Custom", "The Hold Sequence was turned off by a mode change");
            id(hold_switch).publish_state(false);
          }

          if (state_value == "Max") {
            id(fan_high).execute();
          } else if (state_value == "Intermittent") {
            id(fan_intermittent).execute();
          } else if (state_value == "Intermittent (Custom)") {
            id(fan_intermittent_custom).execute();
          } else if (state_value == "Min") {
            id(fan_low).execute();
          } else if (state_value == "Turbo") {
            id(fan_high).execute();
          } else if (state_value == "Hold") {
            id(idle_sequence).execute();
          } else {
            id(idle_sequence).execute();
          }

  - platform: template
    icon: mdi:fan
    name: Fan Speed
    id: fan_speed
    lambda: |-
      int state = (id(high).state << 2) | (id(intermittent).state << 1) | (id(low).state);
      switch (state) {
        case 0:
          return {"Idle"};
        case 1:
          return {"Low"};
        case 2:
          return {"Intermittent"};
        case 4:
          return {"High"};
        default:
          return {"Error"};
      }
    on_value:
      then: 
        lambda: |-
          std::string state_value = x;  //get trigger value
          if (state_value == "High") {
            id(air_cfm).publish_state(id(high_cfm));
          } else if (state_value == "Low") {
            id(air_cfm).publish_state(id(low_cfm));
          } else if (state_value == "Idle") {
            id(air_cfm).publish_state(0);
          } else {
            id(air_cfm).publish_state(-1);
          }

  # Debug sensors
  - platform: template
    icon: mdi:bug
    name: Last State
    id: last_state
    lambda: return id(previous_state);


switch:
  - platform: gpio
    name: Short
    internal: true
    id: high
    pin: 
      number: GPIO17
      mode: OUTPUT
    interlock: [intermittent, low]
    interlock_wait_time: 1s
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - text_sensor.template.publish:
          id: fan_speed
          state: High
    on_turn_off:
      - text_sensor.template.publish:
          id: fan_speed
          state: Idle

  - platform: gpio
    name: 180kOhm
    internal: true
    id: intermittent
    pin: 
      number: GPIO16
      mode: OUTPUT
    interlock: [high, low]
    interlock_wait_time: 1s
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - text_sensor.template.publish:
          id: fan_speed
          state: Intermittent
    on_turn_off:
      - text_sensor.template.publish:
          id: fan_speed
          state: Idle

  - platform: gpio
    name: 47kOhm
    internal: true
    id: low
    pin: 
      number: GPIO15
      mode: OUTPUT
    interlock: [high, intermittent]
    interlock_wait_time: 1s
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - text_sensor.template.publish:
          id: fan_speed
          state: Low
    on_turn_off:
      - text_sensor.template.publish:
          id: fan_speed
          state: Idle

  
  - platform: restart
    name: "Restart"


  - platform: template
    name: Turbo
    id: turbo_switch
    icon: mdi:weather-windy
    optimistic: true  # Force it to retain it's state without lambda
    restore_state: yes
    restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      - logger.log: "Turbo sequence initiated"
      - globals.set:
          id: previous_state
          value: !lambda |-
            std::string old_state = {id(previous_state)};
            std::string current_state = {id(hrv_state).state};
            if (current_state == "Hold") {
              ESP_LOGD("custom", "Hold -> Turbo, previous state (%s) not changed", old_state.c_str());
              return id(previous_state); // don't change previous state
            } else if (id(previous_state) == "Turbo") {
              ESP_LOGD("Error!", "This should be an impossible case!");  // The state can't be turbo unless the switch is on
              return id(previous_state); // don't change previous state
            } else {
              ESP_LOGD("custom", "New previous state: %s", current_state.c_str());
              return id(hrv_state).state; // store the previous state
            }
      - text_sensor.template.publish:
          id: hrv_state
          state: Turbo
    turn_off_action:
      - logger.log: "Turbo sequence ended by switch"
      - lambda: !lambda |-
          std::string old_state = {id(previous_state)};
          ESP_LOGD("custom", "Previous state: %s. Returned to previous state", old_state.c_str());
          id(hrv_state).publish_state(old_state);

  - platform: template
    name: Hold
    id: hold_switch
    icon: mdi:fan-off
    optimistic: true  # Force it to retain it's state without lambda
    restore_state: yes
    restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      - logger.log: "Hold sequence initiated"
      - globals.set:
          id: previous_state
          value: !lambda |-
            std::string old_state = {id(previous_state)};
            std::string current_state = {id(hrv_state).state};
            if (current_state == "Turbo") {
              ESP_LOGD("custom", "Turbo -> Hold, previous state (%s) not changed", old_state.c_str());
              return id(previous_state); // don't change previous state
            } else if (id(previous_state) == "Hold") {
              ESP_LOGD("Error!", "This should be an impossible case!");  // The state can't be hold unless the switch is on
              return id(previous_state); // don't change previous state
            } else {
              ESP_LOGD("custom", "New previous state: %s", current_state.c_str());
              return id(hrv_state).state; // store the previous state
            }
      - text_sensor.template.publish:
          id: hrv_state
          state: Hold
    turn_off_action:
      - logger.log: "Hold sequence ended by switch"
      - lambda: !lambda |-
          std::string old_state = {id(previous_state)};
          ESP_LOGD("custom", "Previous state: %s. Returned to previous state", old_state.c_str());
          id(hrv_state).publish_state(old_state);

sensor:
  - platform: wifi_signal
    name: Wifi RSSI
    update_interval: 60s
  - platform: uptime
    name: Uptime
    update_interval: 60s

  - platform: template
    name: Air Flow
    id: air_cfm
    icon: mdi:air-filter
    unit_of_measurement: "cfm"
    state_class: measurement

  - platform: integration
    sensor: air_cfm
    name: Cumulative Air Flow
    id: air_cumulative
    unit_of_measurement: ftÂ³
    time_unit: min
    device_class: volume
    state_class: total_increasing

  - platform: integration
    sensor: air_cfm
    name: Daily Air Changes
    id: air_changes
    unit_of_measurement: ""
    state_class: total_increasing
    time_unit: min
    filters:
      - multiply: 0.0000625 #estimate


time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      # Reset the cumulative airflow at midnight
      - seconds: 0
        minutes: 0
        hours: 0
        then: 
          - sensor.integration.reset: air_cumulative
          - sensor.integration.reset: air_changes


script:
  - id: idle_sequence
    mode: single
    then:
      - logger.log: "Setting fan to idle"
      - switch.turn_off: high
      - switch.turn_off: low
      - switch.turn_off: intermittent
      - sensor.template.publish:
          id: air_cfm
          state: 0

  - id: fan_low
    mode: single
    then:
      - logger.log: "Setting fan speed to low"
      - switch.turn_on: low
      # - sensor.template.publish:
      #     id: air_cfm
      #     state: 66

  - id: fan_high
    mode: single
    then:
      - logger.log: "Setting fan speed to high"
      - switch.turn_on: high
      # - sensor.template.publish:
      #     id: air_cfm
      #     state: 150

  - id: fan_intermittent
    mode: single
    then:
      - logger.log: "Setting fan speed to intermittent"
      - switch.turn_on: intermittent

  - id: fan_intermittent_custom
    mode: restart
    then:
      - logger.log: "Intermittent loop started"
      - logger.log: "[Intermittent] ON phase"
      - script.execute: fan_low
      - delay: 20min
      # Check that the HRV is still the current state
      - if:
          condition:
            text_sensor.state:
              id: hrv_state
              state: "Intermittent (Custom)"
          then: 
            - script.execute: idle_sequence
            - logger.log: "[Intermittent] OFF phase"
          else: 
            script.stop: fan_intermittent_custom
      - delay: 40min
      - if:
          condition:
            text_sensor.state:
              id: hrv_state
              state: "Intermittent (Custom)"     
          then:
            script.execute: fan_intermittent_custom
